#ifndef MASSPOINT_H
#define MASSPOINT_H

//#include "RK4Spring.h"
#include <ngl/Camera.h>
#include <ngl/ShaderLib.h>


class MassPoint
{
public:
  MassPoint();
  inline void setPos(const float &_a,const float &_b){m_pos.set(_a,_b,0);}
  //----------------------------------------------------------------------------------------------------------------------
  inline ngl::Vec3 getPos()const{return m_pos;}
  //----------------------------------------------------------------------------------------------------------------------
  inline int getMassPointIndex()const{return m_mIndex;}
  //----------------------------------------------------------------------------------------------------------------------
  inline void setForce(const ngl::Vec3 &_force){m_force+=_force;}
  //----------------------------------------------------------------------------------------------------------------------
  inline void setVel(const ngl::Vec3 &_vel){m_vel =_vel;}
  //----------------------------------------------------------------------------------------------------------------------
  inline ngl::Vec3 getForce() const{return m_force;}
  //----------------------------------------------------------------------------------------------------------------------
  inline ngl::Vec3 getAccel() const{return m_accel;}
  //----------------------------------------------------------------------------------------------------------------------
  inline ngl::Vec3 getVel() const {return m_vel;}
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief set the new position based on a vector
  inline void setPosVec(const ngl::Vec3 &_vec){m_pos = _vec;}

  /// @brief move the mass point based on the force
  void move(const ngl::Vec3 &_pos);
  /// @brief set the mass point index
  inline void setMassPointIndex(const int &_indexa){
    m_mIndex = _indexa;}
  ///@ brief reset the force
  inline void resetForce(){m_force = 0;m_accel=0;/*m_vel=0;*/}

private:

  /// @brief the mass for the point
  float m_mass;
//  /// @brief a spring to hold the temporary active spring
//  RK4Spring *m_spring;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief total force on this point
  //----------------------------------------------------------------------------------------------------------------------
  ngl::Vec3 m_force;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief position of this point
  //----------------------------------------------------------------------------------------------------------------------
  ngl::Vec3 m_pos;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief the velocity for the current point
  //----------------------------------------------------------------------------------------------------------------------
  ngl::Vec3 m_vel;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief the acceleration of this point
  //----------------------------------------------------------------------------------------------------------------------
  ngl::Vec3 m_accel;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief the max speed for the point
  //----------------------------------------------------------------------------------------------------------------------
  ngl::Vec3 m_maxSpeed;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief the max acceleration for the point
  //----------------------------------------------------------------------------------------------------------------------
  ngl::Vec3 m_maxAccel;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief masspoint id
  //----------------------------------------------------------------------------------------------------------------------
  int m_mIndex;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief the normal for the mass point
  //----------------------------------------------------------------------------------------------------------------------
  ngl::Vec3 m_normal;
  //----------------------------------------------------------------------------------------------------------------------
};

#endif // MASSPOINT_H
